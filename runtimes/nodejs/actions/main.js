// Load the Cloudant library.
var common = require('./common/utils.js')
var content_type_header = {'Content-Type': 'application/json'}


// GET handler for the get_todo action
function getHandler(params) {
  var api_root_url = params.__ow_headers['x-forwarded-url'];
  cloudant = common.getDb(params)

  return new Promise(function(resolve, reject) {
    todo_db_name = common.getDbName(params)
    common.asyncSafeDbCreate(cloudant.db, todo_db_name)
    .then(function() {
      todo_db = cloudant.db.use(todo_db_name)
      todo_id = common.getToDoID(params)
      if (todo_id == "") {
        return common.asyncToDoList(todo_db, api_root_url)
      } else {
        return common.asyncToDoGet(todo_db, api_root_url, todo_id)
      }
    })
    .then(common.resolveSuccessFunction(resolve))
    .catch(common.rejectErrorsFunction(reject))
  })
}

// POST handler for the post_todo action
function postHandler(params) {
  var api_root_url = params.__ow_headers['x-forwarded-url'];
  cloudant = common.getDb(params)

  return new Promise(function(resolve, reject) {
    todo_db_name = common.getDbName(params)
    common.asyncSafeDbCreate(cloudant.db, todo_db_name)
    .then(function() {
      todo_db = cloudant.db.use(todo_db_name)
      // Title is mandatory
      if (! params.title) {
        reject({
          statusCode: 400,
          headers: content_type_header,
          body: {
            error: "A title for the TODO is mandatory."
          }
        })
      }
      todo_id = common.getToDoID(params)
      // ID is not allowed (generated by the backend)
      if (todo_id) {
        reject({
          statusCode: 400,
          headers: content_type_header,
          body: {
            error: "Setting the ID for a TODO is not allowed."
          }
        })
      } else {
        return common.asyncToDoPost(todo_db, api_root_url, params)
      }
    })
    .then(common.resolveSuccessFunction(resolve))
    .catch(common.rejectErrorsFunction(reject))
  })
}

// PATCH handler for the patch_todo action
function patchHandler(params) {
  var api_root_url = params.__ow_headers['x-forwarded-url'];
  cloudant = common.getDb(params)

  return new Promise(function(resolve, reject) {
    todo_db_name = common.getDbName(params)
    common.asyncSafeDbCreate(cloudant.db, todo_db_name)
    .then(function() {
      todo_db = cloudant.db.use(todo_db_name)
      // ID is mandatory
      todo_id = common.getToDoID(params)
      if (! todo_id) {
        reject({
          statusCode: 400,
          headers: content_type_header,
          body: {
            error: "ID in the path of the todo to patch is mandatory."
          }
        })
      } else {
        return common.asyncToDoPatch(todo_db, api_root_url, todo_id, params)
      }
    })
    .then(common.resolveSuccessFunction(resolve))
    .catch(common.rejectErrorsFunction(reject))
  })
}

// DELETE handler for the delete_todo action
function deleteHandler(params) {
  var api_root_url = params.__ow_headers['x-forwarded-url'];
  cloudant = common.getDb(params)

  return new Promise(function(resolve, reject) {
    todo_db_name = common.getDbName(params)
    common.asyncSafeDbCreate(cloudant.db, todo_db_name)
    .then(function() {
      todo_db = cloudant.db.use(todo_db_name)
      todo_id = common.getToDoID(params)
      if (todo_id == "") {
        return common.asyncToDoDeleteAll(todo_db)
      } else {
        return common.asyncToDoDelete(todo_db, todo_id)
      }
    })
    .then(common.resolveSuccessFunction(resolve))
    .catch(common.rejectErrorsFunction(reject))
  })
}

module.exports = {
  get: getHandler,
  post: postHandler,
  patch: patchHandler,
  delete: deleteHandler,
}
